name: Quality Gates

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality-checks:
    name: Quality Enforcement
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run ktlint code formatting check
        run: ./gradlew ktlintCheck
        
      - name: Run Detekt static analysis
        run: ./gradlew detekt
        continue-on-error: false
        
      - name: Upload Detekt reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: detekt-reports
          path: |
            **/build/reports/detekt/
          retention-days: 30

      - name: Run unit tests
        run: ./gradlew :composeApp:testDebugUnitTest
        
      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Unit Test Results
          path: '**/build/test-results/**/*.xml'
          reporter: java-junit
          fail-on-error: true

      - name: Check for security issues
        run: |
          echo "üîí Running basic security scan..."
          if grep -r "password\|secret\|api_key" --include="*.kt" . --exclude-dir=build --exclude-dir=.gradle; then
            echo "‚ö†Ô∏è Potential hardcoded credentials found - please review"
            exit 0  # Don't fail build, just warn
          else
            echo "‚úÖ No obvious security issues found"
          fi

      - name: Quality gate summary
        if: always()
        run: |
          echo "## üéØ Quality Gate Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Check ktlint status
          if [ -f "build/reports/ktlint/ktlintMainSourceSetCheck/ktlintMainSourceSetCheck.txt" ]; then
            echo "| ktlint | ‚ùå Failed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| ktlint | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check detekt status  
          if [ -f "build/reports/detekt/detekt.xml" ]; then
            ISSUES=$(grep -c '<error' build/reports/detekt/detekt.xml || echo "0")
            if [ "$ISSUES" -gt "0" ]; then
              echo "| Detekt | ‚ùå $ISSUES issues |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Detekt | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "| Detekt | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check test results
          if [ -d "composeApp/build/test-results" ]; then
            FAILURES=$(find composeApp/build/test-results -name "*.xml" -exec grep -l 'failures="[^0]"' {} \; | wc -l)
            if [ "$FAILURES" -gt "0" ]; then
              echo "| Unit Tests | ‚ùå $FAILURES failures |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Unit Tests | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "| Unit Tests | ‚ö†Ô∏è Not run |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìä [View detailed reports in artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

      - name: Comment PR with quality results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            let comment = '## üéØ Quality Gate Results\n\n';
            
            // Check if quality checks passed
            const workflowStatus = '${{ job.status }}';
            if (workflowStatus === 'success') {
              comment += '‚úÖ **All quality checks passed!** Code meets enterprise standards.\n\n';
            } else {
              comment += '‚ùå **Quality checks failed.** Please fix the issues before merging.\n\n';
            }
            
            comment += '### Checks performed:\n';
            comment += '- ‚úÖ Code formatting (ktlint)\n';
            comment += '- ‚úÖ Static analysis (Detekt)\n';
            comment += '- ‚úÖ Unit tests\n';
            comment += '- ‚úÖ Security scan\n\n';
            
            comment += '### üìã Enterprise Standards Enforced:\n';
            comment += '- Zero tolerance for quality violations\n';
            comment += '- SOLID, DRY, KISS, YAGNI principles\n';
            comment += '- KMP-specific best practices\n';
            comment += '- Backend-driven architecture patterns\n\n';
            
            if (workflowStatus !== 'success') {
              comment += '### üîß How to fix:\n';
              comment += '1. Run `./gradlew ktlintFormat` to fix formatting\n';
              comment += '2. Run `./gradlew detekt` to see analysis results\n';
              comment += '3. Run `./gradlew test` to check test failures\n';
              comment += '4. Check the Actions tab for detailed reports\n\n';
            }
            
            comment += '---\n';
            comment += '*ü§ñ Automated quality enforcement by Quantive CI/CD*';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    needs: quality-checks
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build Android Debug APK
        run: ./gradlew :composeApp:assembleDebug

      - name: Build KMP Framework for iOS
        run: ./gradlew :composeApp:linkDebugFrameworkIosSimulatorArm64

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: build-artifacts
          path: |
            composeApp/build/outputs/apk/debug/
            composeApp/build/bin/iosSimulatorArm64/
          retention-days: 7