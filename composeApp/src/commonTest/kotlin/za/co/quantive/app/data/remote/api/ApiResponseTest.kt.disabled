package za.co.quantive.app.data.remote.api

import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertFalse
import kotlin.test.assertTrue

class ApiResponseTest {

    @Test
    fun `success response should have correct properties`() {
        val data = "test data"
        val response = ApiResponse.success(data)

        assertTrue(response.success)
        assertTrue(response.isSuccess())
        assertEquals(data, response.data)
    }

    @Test
    fun `error response should have correct properties`() {
        val errorMessage = "Something went wrong"
        val response: ApiResponse<String> = ApiResponse.error(errorMessage)

        assertFalse(response.success)
        assertFalse(response.isSuccess())
        assertEquals(errorMessage, response.message)
        assertEquals(errorMessage, response.error)
    }

    @Test
    fun `pagination info calculates derived fields correctly`() {
        val pagination = PaginationInfo(
            page = 1,
            limit = 10,
            total = 25,
        )

        assertEquals(3, pagination.totalPages) // ceil(25/10) = 3
        assertTrue(pagination.hasNext) // page 1, totalPages 3
        assertTrue(pagination.hasPrevious) // page 1 > 0
    }

    @Test
    fun `pagination info handles edge cases`() {
        // First page
        val firstPage = PaginationInfo(page = 0, limit = 10, total = 25)
        assertFalse(firstPage.hasPrevious)
        assertTrue(firstPage.hasNext)

        // Last page
        val lastPage = PaginationInfo(page = 2, limit = 10, total = 25)
        assertTrue(lastPage.hasPrevious)
        assertFalse(lastPage.hasNext)

        // Only one page
        val singlePage = PaginationInfo(page = 0, limit = 10, total = 5)
        assertFalse(singlePage.hasPrevious)
        assertFalse(singlePage.hasNext)
        assertEquals(1, singlePage.totalPages)
    }
}
